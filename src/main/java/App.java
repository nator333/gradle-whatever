import java.util.Arrays;
import java.util.stream.Stream;

/** This Java source file was generated by the Gradle 'init' task. */
public class App {

  /**
   * Greet
   *
   * @return String greeting Word
   */
  private String getGreeting() {
    return "Hello world.";
  }

  /**
   * Main　なんかする
   *
   * @param args String array
   */
  public static void main(String[] args) {
    System.out.println(new App().getGreeting());
    if (args.length != 0) {
      System.out.println(args.length + " words were detected. \nPrint start. ");
      Stream.of(args).forEach(System.out::println);
    }

    // Sort
    int processCount = 0;
    //// Bubble sort
    // int[] numbers = {5, 4, 3, 2, 1};
    int[] numbers = {1, 2, 3, 4, 5};
    int swapCount = -1;
    int unsortedMaxIndex = numbers.length - 1;
    int swapTempInt = 0;

    while (swapCount != 0) {
      processCount++;
      swapCount = 0;

      for (int i = 0; i < unsortedMaxIndex; i++) {
        if (numbers[i] > numbers[i + 1]) {
          swapTempInt = numbers[i];
          numbers[i] = numbers[i + 1];
          numbers[i + 1] = swapTempInt;
          swapCount++;
        }
      }
      unsortedMaxIndex--;
    }

    System.out.println(String.format("処理回数は%sです", processCount));
    System.out.println(String.format("バブルソート後の配列は%sです", Arrays.toString(numbers)));

    // Insertion sort
    processCount = 0;
    int[] newNums = {5, 4, 3, 2, 1};
    numbers = newNums;
    int currentIndex = 1;
    int checkIndex = 0;
    int currentNum = 0;
    int numsLength = numbers.length;

    while (currentIndex != numsLength) {
      // Initialize
      checkIndex = currentIndex - 1;
      currentNum = numbers[currentIndex];

      if (currentNum < numbers[checkIndex]) {
        // Search where to insert
        int searchPosiIndex = 0;
        for (searchPosiIndex = checkIndex; searchPosiIndex >= 0; searchPosiIndex--) {
          if (currentNum < numbers[checkIndex]) {
            numbers[searchPosiIndex + 1] = numbers[searchPosiIndex];
              processCount++;
          } else {
            break;
          }
        }
        numbers[searchPosiIndex + 1] = currentNum;

      }

      currentIndex++;
    }

    System.out.println(String.format("処理回数は%sです", processCount));
    System.out.println(String.format("挿入ソート後の配列は%sです", Arrays.toString(numbers)));

    System.out.println(String.format("フィボナッチ関数の結果は%sです", fibonacciSequence(9)));

  }


  // Fibonacci Sequence
  private static int fibonacciSequence(int times) {
      switch (times) {
          case 0:
              return 0;
          case 1:
              return 1;
          default:
              return fibonacciSequence(times - 2) + fibonacciSequence(times -1);
      }
  }

}